rules_version = '2';
service cloud.firestore {
  // デバッグ用関数、デプロイ時に消す!!!
  // function printRequest() {
  //   return debug(request) || true;
  // }

  // デバッグ用関数、デプロイ時に消す!!!
  // function printResource() {
  //   return debug(resource) || true;
  // }

  match /databases/{database}/documents {
    // Firebase Authで認証されているか判断
    function isAuthenticated() {
      return request.auth != null;
    }

    // 認証されててUserIDが一致しているか判断
    function isUserAuthenticated(userID) {
      return isAuthenticated() && userID == request.auth.uid;
    }

    // Userのスキーマ検証
    function isValidUser(user) {
      return user.size() == 5 // 5つのフィールドを持っている
      && 'UserID' in user && user.UserID is string // UserIDがあって、string
      && 'Agreement' in user && user.Agreement is bool // Agreementがあって、boolean
      && 'AgreementDate' in user && user.AgreementDate is timestamp // AgreementDateがあって、timestamp
      && 'AuthStyle' in user && user.AuthStyle is string // AuthStyleがあって、string
      && 'RegistrationDate' in user && user.RegistrationDate is timestamp // RegistrationDateがあって、timestamp
    }

    // User/MyGroupのスキーマ検証
    function isValidMyGroup(group) {
      return group.size() == 8 // 8つのフィールドを持っている
      && 'MyGroupID' in group && group.MyGroupID is string // GroupIDがあって、string
      && 'GroupName' in group && group.GroupName is string // GroupNameがあって、string
      && 'GroupNameEng' in group && group.GroupNameEng is string // GroupNameEngがあって、string
      && 'GroupPassword' in group && group.GroupPassword is string // GroupPasswordがあって、string
      && 'JoiningDate' in group && group.JoiningDate is timestamp // JoiningDateがあって、timestamp
      && 'MemberType' in group && group.MemberType is string // MemberTypeがあって、string
      && 'Role' in group && group.Role is string // Roleがあって、string
      && 'Term' in group && group.Term is string // Termがあって、string
    }

    // Usersに関するRule
    match /Users/{userID} {
      // Usersの情報を読み取れるのは自分だけ
      allow read: if isUserAuthenticated(userID);

      // Usersの情報を作れるのは自分のIDのドキュメントだけ
      allow create: if isUserAuthenticated(userID) // ログインとUserIDの判定
      && isValidUser(request.resource.data) // スキーマ検証
      // 以下データのバリデーション
      && request.auth.uid == request.resource.data.UserID // UserIDが一致
      && request.resource.data.Agreement // Agreementがtrue
      && request.resource.data.AgreementDate < request.time // AgreementDateがrequest.time以前(チェックする→送信の流れなので必ず少し前になる)
      && request.resource.data.RegistrationDate == request.time // 作成時刻はサーバタイムスタンプの値と一致

      // Users情報を更新できるのは自分だけ、またRegistrationDateは更新できない
      allow update: if isUserAuthenticated(userID) // ログインとUserIDの判定
      && isValidUser(request.resource.data) // スキーマ検証
      // 以下データのバリデーション
      && request.resource.data.UserID == resource.data.UserID // UserIDが更新されていない
      && request.resource.data.Agreement // Agreementがtrue
      && request.resource.data.AgreementDate < request.time // AgreementDateがrequest.time以前(チェックする→送信の流れなので必ず少し前になる)
      && request.resource.data.RegistrationDate == resource.data.RegistrationDate; // RegistrationDateは更新されていない

      // Users情報を削除できるのは自分だけ
      allow delete: if isUserAuthenticated(userID);

      // Users以下のGroupsに関するRule
      match /MyGroups/{groupID} {
        // Groupsの情報を読み取れるのは自分だけ
        allow read: if isUserAuthenticated(userID);

        // Groups情報を作れるのは自分だけ
        allow create: if isUserAuthenticated(userID) // ログインとUserIDの判定
        && isValidMyGroup(request.resource.data) // スキーマ検証
        // 以下データのバリデーション
        && request.resource.data.JoiningDate == request.time // 作成時刻はサーバタイムスタンプの値と一致

        // Groups情報を更新できるのは自分だけ、またJoiningDateとgroupIDは更新できない
        allow update: if isUserAuthenticated(userID) // ログインとUserIDの判定
        && isValidMyGroup(request.resource.data) // スキーマ検証
        // 以下データのバリデーション
        && request.resource.data.MyGroupID == resource.data.MyGroupID // GroupIDが更新されていない
        && request.resource.data.JoiningDate == resource.data.JoiningDate // JoiningDateは更新されていない

          // Groups情報を削除できるのは自分だけ
        allow delete: if isUserAuthenticated(userID);
      }

      // Users以下のGroupsに関するRule2（2021/09/04 杉山追加）
      match /MyAttendance/{groupID} {
        // Groupsの情報を読み取れるのは自分だけ
        allow read: if isUserAuthenticated(userID);

        // Groups情報を作れるのは自分だけ
        allow create: if isUserAuthenticated(userID) // ログインとUserIDの判定

        // Groups情報を更新できるのは自分だけ、またJoiningDateは更新できない
        allow update: if isUserAuthenticated(userID) // ログインとUserIDの判定

        // Groups情報を削除できるのは自分だけ
        allow delete: if isUserAuthenticated(userID);
      }
    }

    // Groupsに関するRule
    match /Groups/{groupID} {
      // UserがgroupIDに所属しているか判定
      function isBelongingGroup(groupID) {
        return exists(/databases/$(database)/documents/Groups/$(groupID)/Members/$(request.auth.uid))
      }

      // Groupのスキーマ検証
      function isValidGroup(group) {
        return group.size() == 4 // 要素は4つ
        && 'GroupID' in group && group.GroupID is string // GroupIDがあって、string
        && 'GroupName' in group && group.GroupName is string // GroupNameがあって、string
        && 'GroupNameEng' in group && group.GroupNameEng is string // GroupNameEngがあって、string
        && 'GroupPassword' in group && group.GroupPassword is string // GroupPasswordがあって、string
      }

      // Eventのスキーマ検証
      function isValidEvent(event) {
        return event.size() <= 23 && event.size() >= 16 // 要素は15~22個
        && 'EventID' in event && event.EventID is string // EventIDがあって、string
        && 'EventName' in event && event.EventName is string // EventNameがあって、string
        && 'EventType' in event && event.EventType is string // EventTypeがあって、string
        && (!('EventTypeDetail' in event) || ('EventTypeDetail' in event && event.EventTypeDetail is string)) // EventTypeDetailがあったら、string
        && 'FirstUpdatedByID' in event && event.FirstUpdatedByID is string // FirstUpdatedByIDがあって、string
        && 'FirstUpdatedByName' in event && event.FirstUpdatedByName is string // FirstUpdatedByNameがあって、string
        && (!('FirstUpdatedOn' in event) || ('FirstUpdatedOn' in event && event.LastUpdatedOn is timestamp)) // FirstUpdatedOnがあって、timestamp
        && 'LastUpdatedByID' in event && event.LastUpdatedByID is string // LastUpdatedByIDがあって、string
        && 'LastUpdatedByName' in event && event.LastUpdatedByName is string // LastUpdatedByNameがあって、string
        && (!('LastUpdatedOn' in event) || ('LastUpdatedOn' in event && event.LastUpdatedOn is timestamp)) // LastUpdatedOnがあって、timestamp
        && (!('Memo' in event) || ('Memo' in event && event.Memo is string)) // Memoがあったら、string
        && (!('Notice' in event) || ('Notice' in event && event.Notice is string)) // Noticeがあったら、string
        && 'OwnerID' in event && event.OwnerID is string // OwnerIDがあって、string
        && 'OwnerName' in event && event.OwnerName is string // OwnerNameがあって、string
        && (!('Place' in event) || ('Place' in event && event.Place is string)) // Placeがあったら、string
        && (!('PlaceDetail' in event) || ('PlaceDetail' in event && event.PlaceDetail is string)) // PlaceDetailがあったら、string
        && (!('PlaceName' in event) || ('PlaceName' in event && event.PlaceName is string)) // PlaceNameがあったら、string
        && 'TagAttendance' in event && event.TagAttendance is bool // TagAttendanceがあって、bool
        && 'TagCancel' in event && event.TagCancel is bool // TagCancelがあって、bool
        && 'TagImportance' in event && event.TagImportance is bool // TagImportanceがあって、bool
        && 'TimestampEnd' in event && event.TimestampEnd is timestamp // TimestampEndがあって、timestamp
        && 'TimestampStart' in event && event.TimestampStart is timestamp // TimestampStartがあって、timestamp
        && (!('Timetable' in event) || ('Timetable' in event && event.Timetable is string)); // Timetableがあったら、string
      }

      // Membersのスキーマ検証
      function isValidMember(member) {
        return member.size() == 6 // 要素は6つ
        && 'MemberID' in member && member.MemberID is string // MemberIDがあって、string
        && 'JoiningDate' in member && member.JoiningDate is timestamp // JoiningDateがあって、timestamp
        && 'MemberName' in member && member.MemberName is string // MemberNameがあって、string
        && 'MemberType' in member && member.MemberType is string // MemberTypeがあって、string
        && 'Role' in member && member.Role is string // Roleがあって、string
        && 'Term' in member && member.Term is string // Termがあって、string
      }

      // Groupsの情報はログインしていれば誰でも読み込める
      allow read: if isAuthenticated();

      // Groups情報はグループに所属していれば編集できる
      allow update: if isAuthenticated() // ログインしてるかチェック
      && isBelongingGroup(groupID) // 所属しているかチェック
      && isValidGroup(request.resource.data) // スキーマ検証
      // 以下データのバリデーション
      && request.resource.data.GroupID == resource.data.GroupID // GroupIDが更新されていない

      // Groups情報は現段階では作成、削除ができない
      allow create, delete: if false;

      // Membersに関するルール
      match /Members/{memberID} {
        allow read: if isAuthenticated(); // ログインしてる

        // 作成はログインしていればできる
        // パスワード認証で不正なユーザは弾く
        allow create: if isAuthenticated() // ログインしてて
        && isValidMember(request.resource.data)
        && request.resource.data.JoiningDate == request.time // 作成時刻はサーバタイムスタンプの値と一致

        // 編集はGroupに所属していて自分自身ならできる
        allow update: if isAuthenticated() // ログインしてて
        && isBelongingGroup(groupID) // 所属していて
        && request.auth.uid == memberID // 自分自身
        && isValidMember(request.resource.data)
        && request.resource.data.MemberID == resource.data.MemberID // MemberIDは更新されない
        && request.resource.data.JoiningDate == resource.data.JoiningDate // 作成時刻は更新されない

        // 削除はGroupに所属していて自分自身ならできる
        allow delete: if isAuthenticated() // ログインしてて
        && isBelongingGroup(groupID) // 所属している
        && request.auth.uid == memberID // 自分自身
      }

      // Eventsに関するルール
      match /Events/{eventID} {
        // Groupに所属しているユーザなら参照できる
        allow read: if isAuthenticated() // ログインしてて
        && isBelongingGroup(groupID); // 所属している

        // 作成もGroupに所属しているユーザならできる
        allow create: if isAuthenticated() // ログインしてて
        && isBelongingGroup(groupID) // 所属している
        && isValidEvent(request.resource.data)
        && request.resource.data.FirstUpdatedOn == request.time // 作成時刻はサーバタイムスタンプの値と一致
        && request.resource.data.LastUpdatedOn == request.time; // 作成時刻はサーバタイムスタンプの値と一致

        // 編集もGroupに所属しているユーザならできる
        allow update: if isAuthenticated() // ログインしてて
        && isBelongingGroup(groupID) // 所属している
        && isValidEvent(request.resource.data)
        && request.resource.data.FirstUpdatedOn == resource.data.FirstUpdatedOn // 作成時刻は更新されない
        && request.resource.data.LastUpdatedOn == request.time // 更新時刻はサーバタイムスタンプの値と一致
        && request.resource.data.EventID == resource.data.EventID; // EventIDは更新されない

        // 削除もGroupに所属しているユーザならできる
        allow delete: if isAuthenticated() // ログインしてて
        && isBelongingGroup(groupID); // 所属している
      }

      // 連絡について（2021/07/03 杉山追加）
      match /Mails/{mailID} {
        allow read, create, delete, update: if true;
      }

      // 演奏曲について（2021/06/12 杉山追加）
      match /Programs/{programID} {
        allow read, create, delete, update: if true;
      }

      // 演奏指示について（2021/09/05 杉山追加）
      match /Programs/{programID}/Instructions/{instructionID} {
        allow read, create, delete, update: if true;
      }

      // 録音について（2021/09/05 杉山追加）
      match /Programs/{programID}/Records/{reccordID} {
        allow read, create, delete, update: if true;
      }

      // 乗り番について（2021/09/05 杉山追加）
      match /Programs/{programID}/Players/{playerID} {
        allow read, create, delete, update: if true;
      }
    }
  }
}