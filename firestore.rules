rules_version = '2';
service cloud.firestore {
  // デバッグ用関数、デプロイ時に消す!!!
  function printRequest() {
    return debug(request) || true;
  }

  // デバッグ用関数、デプロイ時に消す!!!
  function printResource() {
    return debug(resource) || true;
  }

  match /databases/{database}/documents {
    // Firebase Authで認証されているか判断
    function isAuthenticated() {
      return request.auth != null;
    }

    // 認証されててUserIDが一致しているか判断
    function isUserAuthenticated(userID) {
      return isAuthenticated() && userID == request.auth.uid;
    }

    // Userのスキーマ検証
    function isValidUser(user) {
      return user.size() == 5 // 5つのフィールドを持っている
      && 'Agreement' in user && user.Agreement is bool // Agreementがあって、boolean
      && 'AgreementDate' in user && user.AgreementDate is timestamp // AgreementDateがあって、timestamp
      && 'AuthStyle' in user && user.AuthStyle is string // AuthStyleがあって、string
      && 'RegistrationDate' in user && user.RegistrationDate is timestamp // RegistrationDateがあって、timestamp
      && 'UserName' in user && user.UserName is string // UserNameがあって、string
    }

    // User/Groupのスキーマ検証
    function isValidUserGroup(group) {
      return group.size() == 7 // 5つのフィールドを持っている
      && 'GroupName' in group && group.GroupName is string // GroupNameがあって、string
      && 'GroupNameEng' in group && group.GroupNameEng is string // GroupNameEngがあって、string
      && 'GroupPassword' in group && group.GroupPassword is string // GroupPasswordがあって、string
      && 'JoiningDate' in group && group.JoiningDate is timestamp // JoiningDateがあって、timestamp
      && 'MemberType' in group && group.MemberType is string // MemberTypeがあって、string
      && 'Role' in group && group.Role is string // Roleがあって、string
      && 'Term' in group && group.Term is string // Termがあって、string
    }

    // Usersに関するRule
    match /Users/{userID} {
      // Usersの情報を読み取れるのは自分だけ
      allow read: if isUserAuthenticated(userID);

      // Usersの情報を作れるのは自分のIDのドキュメントだけ
      allow create: if isUserAuthenticated(userID) // ログインとUserIDの判定
      && isValidUser(request.resource.data) // スキーマ検証
      // 以下データのバリデーション
      && request.resource.data.Agreement // Agreementがtrue
      && request.resource.data.AgreementDate < request.time // AgreementDateがrequest.time以前(チェックする→送信の流れなので必ず少し前になる)
      && request.resource.data.RegistrationDate == request.time // 作成時刻はサーバタイムスタンプの値と一致

      // User情報を更新できるのは自分だけ、またRegistrationDateは更新できない
      allow update: if isUserAuthenticated(userID) // ログインとUserIDの判定
      && isValidUser(request.resource.data) // スキーマ検証
      // 以下データのバリデーション
      && request.resource.data.Agreement // Agreementがtrue
      && request.resource.data.AgreementDate < request.time // AgreementDateがrequest.time以前(チェックする→送信の流れなので必ず少し前になる)
      && request.resource.data.RegistrationDate == resource.data.RegistrationDate; // RegistrationDateは更新されていない

      // User情報を削除できるのは自分だけ
      allow delete: if isUserAuthenticated(userID);

      // Users以下のGroupsに関するRule
      match /Groups/{groupID} {
        // Groupsの情報を読み取れるのは自分だけ
        allow read: if isUserAuthenticated(userID);

        // Groups情報を作れるのは自分だけ
        allow create: if isUserAuthenticated(userID) // ログインとUserIDの判定
        && isValidUserGroup(request.resource.data) // スキーマ検証
        // 以下データのバリデーション
        && request.resource.data.JoiningDate == request.time // 作成時刻はサーバタイムスタンプの値と一致

        // Groups情報を更新できるのは自分だけ、またJoiningDateは更新できない
        allow update: if isUserAuthenticated(userID) // ログインとUserIDの判定
        && isValidUserGroup(request.resource.data) // スキーマ検証
        // 以下データのバリデーション
        && request.resource.data.JoiningDate == resource.data.JoiningDate // JoiningDateは更新されていない

        // Groups情報を削除できるのは自分だけ
        allow delete: if isUserAuthenticated(userID);
      }
    }
  }
}