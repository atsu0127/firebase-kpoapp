rules_version = '2';
service cloud.firestore {
  // デバッグ用関数、デプロイ時に消す!!!
  // function printRequest() {
  //   return debug(request) || true;
  // }

  // デバッグ用関数、デプロイ時に消す!!!
  // function printResource() {
  //   return debug(resource) || true;
  // }

  match /databases/{database}/documents {
    // Firebase Authで認証されているか判断
    function isAuthenticated() {
      return request.auth != null;
    }

    // 認証されててUserIDが一致しているか判断
    function isUserAuthenticated(userID) {
      return isAuthenticated() && userID == request.auth.uid;
    }

    // Userのスキーマ検証
    function isValidUser(user) {
      return user.size() == 5 // 5つのフィールドを持っている
      && 'Agreement' in user && user.Agreement is bool // Agreementがあって、boolean
      && 'AgreementDate' in user && user.AgreementDate is timestamp // AgreementDateがあって、timestamp
      && 'AuthStyle' in user && user.AuthStyle is string // AuthStyleがあって、string
      && 'RegistrationDate' in user && user.RegistrationDate is timestamp // RegistrationDateがあって、timestamp
      && 'UserName' in user && user.UserName is string // UserNameがあって、string
    }

    // User/Groupのスキーマ検証
    function isValidUserGroup(group) {
      return group.size() == 7 // 5つのフィールドを持っている
      && 'GroupName' in group && group.GroupName is string // GroupNameがあって、string
      && 'GroupNameEng' in group && group.GroupNameEng is string // GroupNameEngがあって、string
      && 'GroupPassword' in group && group.GroupPassword is string // GroupPasswordがあって、string
      && 'JoiningDate' in group && group.JoiningDate is timestamp // JoiningDateがあって、timestamp
      && 'MemberType' in group && group.MemberType is string // MemberTypeがあって、string
      && 'Role' in group && group.Role is string // Roleがあって、string
      && 'Term' in group && group.Term is string // Termがあって、string
    }

    // Usersに関するRule
    match /Users/{userID} {
      // Usersの情報を読み取れるのは自分だけ
      allow read: if isUserAuthenticated(userID);

      // Usersの情報を作れるのは自分のIDのドキュメントだけ
      allow create: if isUserAuthenticated(userID) // ログインとUserIDの判定
      && isValidUser(request.resource.data) // スキーマ検証
      // 以下データのバリデーション
      && request.resource.data.Agreement // Agreementがtrue
      && request.resource.data.AgreementDate < request.time // AgreementDateがrequest.time以前(チェックする→送信の流れなので必ず少し前になる)
      && request.resource.data.RegistrationDate == request.time // 作成時刻はサーバタイムスタンプの値と一致

      // Users情報を更新できるのは自分だけ、またRegistrationDateは更新できない
      allow update: if isUserAuthenticated(userID) // ログインとUserIDの判定
      && isValidUser(request.resource.data) // スキーマ検証
      // 以下データのバリデーション
      && request.resource.data.Agreement // Agreementがtrue
      && request.resource.data.AgreementDate < request.time // AgreementDateがrequest.time以前(チェックする→送信の流れなので必ず少し前になる)
      && request.resource.data.RegistrationDate == resource.data.RegistrationDate; // RegistrationDateは更新されていない

      // Users情報を削除できるのは自分だけ
      allow delete: if isUserAuthenticated(userID);

      // Users以下のGroupsに関するRule
      match /Groups/{groupID} {
        // Groupsの情報を読み取れるのは自分だけ
        allow read: if isUserAuthenticated(userID);

        // Groups情報を作れるのは自分だけ
        allow create: if isUserAuthenticated(userID) // ログインとUserIDの判定
        && isValidUserGroup(request.resource.data) // スキーマ検証
        // 以下データのバリデーション
        && request.resource.data.JoiningDate == request.time // 作成時刻はサーバタイムスタンプの値と一致

        // Groups情報を更新できるのは自分だけ、またJoiningDateは更新できない
        allow update: if isUserAuthenticated(userID) // ログインとUserIDの判定
        && isValidUserGroup(request.resource.data) // スキーマ検証
        // 以下データのバリデーション
        && request.resource.data.JoiningDate == resource.data.JoiningDate // JoiningDateは更新されていない

        // Groups情報を削除できるのは自分だけ
        allow delete: if isUserAuthenticated(userID);
      }
    }

    // Groupsに関するRule
    match /Groups/{groupID} {
      // UserがgroupIDに所属しているか判定
      function isBelongingGroup(groupID) {
        return exists(/databases/$(database)/documents/Users/$(request.auth.uid)/Groups/$(groupID))
      }

      // Groupのスキーマ検証
      function isValidGroup(group) {
        return group.size() == 3 // 要素は三つ
        && 'GroupName' in group && group.GroupName is string // GroupNameがあって、string
        && 'GroupNameEng' in group && group.GroupNameEng is string // GroupNameEngがあって、string
        && 'GroupPassword' in group && group.GroupPassword is string // GroupPasswordがあって、string
      }

      // Scheduleのスキーマ検証
      function isValidSchedule(schedule) {
        return schedule.size() <= 22 && schedule.size() >= 15 // 要素は15~22個
        && 'EventName' in schedule && schedule.EventName is string // EventNameがあって、string
        && 'EventType' in schedule && schedule.EventType is string // EventTypeがあって、string
        && (!('EventTypeDetail' in schedule) || ('EventTypeDetail' in schedule && schedule.EventTypeDetail is string)) // EventTypeDetailがあったら、string
        && 'FirstUpdatedByID' in schedule && schedule.FirstUpdatedByID is string // FirstUpdatedByIDがあって、string
        && 'FirstUpdatedByName' in schedule && schedule.FirstUpdatedByName is string // FirstUpdatedByNameがあって、string
        && (!('FirstUpdatedOn' in schedule) || ('FirstUpdatedOn' in schedule && schedule.LastUpdatedOn is timestamp)) // FirstUpdatedOnがあって、timestamp
        && 'LastUpdatedByID' in schedule && schedule.LastUpdatedByID is string // LastUpdatedByIDがあって、string
        && 'LastUpdatedByName' in schedule && schedule.LastUpdatedByName is string // LastUpdatedByNameがあって、string
        && (!('LastUpdatedOn' in schedule) || ('LastUpdatedOn' in schedule && schedule.LastUpdatedOn is timestamp)) // LastUpdatedOnがあって、timestamp
        && (!('Memo' in schedule) || ('Memo' in schedule && schedule.Memo is string)) // Memoがあったら、string
        && (!('Notice' in schedule) || ('Notice' in schedule && schedule.Notice is string)) // Noticeがあったら、string
        && 'OwnerID' in schedule && schedule.OwnerID is string // OwnerIDがあって、string
        && 'OwnerName' in schedule && schedule.OwnerName is string // OwnerNameがあって、string
        && (!('Place' in schedule) || ('Place' in schedule && schedule.Place is string)) // Placeがあったら、string
        && (!('PlaceDetail' in schedule) || ('PlaceDetail' in schedule && schedule.PlaceDetail is string)) // PlaceDetailがあったら、string
        && (!('PlaceName' in schedule) || ('PlaceName' in schedule && schedule.PlaceName is string)) // PlaceNameがあったら、string
        && 'TagAttendance' in schedule && schedule.TagAttendance is bool // TagAttendanceがあって、bool
        && 'TagCancel' in schedule && schedule.TagCancel is bool // TagCancelがあって、bool
        && 'TagImportance' in schedule && schedule.TagImportance is bool // TagImportanceがあって、bool
        && 'TimestampEnd' in schedule && schedule.TimestampEnd is timestamp // TimestampEndがあって、timestamp
        && 'TimestampStart' in schedule && schedule.TimestampStart is timestamp // TimestampStartがあって、timestamp
        && (!('Timetable' in schedule) || ('Timetable' in schedule && schedule.Timetable is string)); // Timetableがあったら、string
      }

      // Groupsの情報はログインしていれば誰でも読み込める
      allow read: if isAuthenticated();

      // Groups情報はグループに所属していれば編集できる
      allow update: if isAuthenticated() // ログインしてるかチェック
      && isBelongingGroup(groupID) // 所属しているかチェック
      && isValidGroup(request.resource.data) // スキーマ検証

      // Groups情報は現段階では作成、削除ができない
      allow create, delete: if false;

      // Scheduleに関するルール
      match /Schedule/{scheduleID} {
        // Groupに所属しているユーザなら参照できる
        allow read: if isAuthenticated() // ログインしてて
        && isBelongingGroup(groupID); // 所属している

        // 作成もGroupに所属しているユーザならできる
        allow create: if isAuthenticated() // ログインしてて
        && isBelongingGroup(groupID) // 所属している
        && isValidSchedule(request.resource.data)
        && request.resource.data.FirstUpdatedOn == request.time // 作成時刻はサーバタイムスタンプの値と一致
        && request.resource.data.LastUpdatedOn == request.time; // 作成時刻はサーバタイムスタンプの値と一致

        // 編集もGroupに所属しているユーザならできる
        allow update: if isAuthenticated() // ログインしてて
        && isBelongingGroup(groupID) // 所属している
        && isValidSchedule(request.resource.data)
        && request.resource.data.FirstUpdatedOn == resource.data.FirstUpdatedOn // 作成時刻は更新されない
        && request.resource.data.LastUpdatedOn == request.time; // 更新時刻はサーバタイムスタンプの値と一致

        // 削除もGroupに所属しているユーザならできる
        allow delete: if isAuthenticated() // ログインしてて
        && isBelongingGroup(groupID); // 所属している
      }
    }
  }
}